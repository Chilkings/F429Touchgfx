<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [F429Touchgfx\F429Touchgfx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image F429Touchgfx\F429Touchgfx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Nov 03 18:23:13 2021
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GT1151_Init &rArr; CT_IIC_Init &rArr; HAL_GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[200]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[200]">touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</a><BR>
 <LI><a href="#[211]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[211]">touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">DMA2D_IRQHandler</a> from stm32f4xx_it.o(i.DMA2D_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from stm32f4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from stm32f4xx_it.o(i.FLASH_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from stm32f4xx_it.o(i.FMC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from stm32f4xx_it.o(i.FPU_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">LTDC_ER_IRQHandler</a> from stm32f4xx_it.o(i.LTDC_ER_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">LTDC_IRQHandler</a> from stm32f4xx_it.o(i.LTDC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from stm32f4xx_it.o(i.PVD_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from stm32f4xx_it.o(i.RCC_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">SPI5_IRQHandler</a> from stm32f4xx_it.o(i.SPI5_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">SPI_DMAAbortOnError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[f]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9b]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[9c]">StartTask</a> from freertos.o(i.StartTask) referenced from freertos.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[38]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</a> from stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef) referenced from stm32dma.o(i._ZN10STM32F4DMA10initializeEv)
 <LI><a href="#[a1]">STM32F4DMA::initialize()</a> from stm32dma.o(i._ZN10STM32F4DMA10initializeEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[9e]">STM32F4DMA::getBlitCaps()</a> from stm32dma.o(i._ZN10STM32F4DMA11getBlitCapsEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a7]">STM32F4DMA::setupDataCopy(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a8]">STM32F4DMA::setupDataFill(const touchgfx::BlitOp&)</a> from stm32dma.o(i._ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a3]">STM32F4DMA::signalDMAInterrupt()</a> from stm32dma.o(i._ZN10STM32F4DMA18signalDMAInterruptEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[94]">STM32F4DMA::~STM32F4DMA()</a> from stm32dma.o(i._ZN10STM32F4DMAD1Ev) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[94]">STM32F4DMA::~STM32F4DMA()</a> from stm32dma.o(i._ZN10STM32F4DMAD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[ae]">screenView::setupScreen()</a> from screenview.o(i._ZN10screenView11setupScreenEv) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b0]">screenView::tearDownScreen()</a> from screenview.o(i._ZN10screenView14tearDownScreenEv) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[ac]">screenView::~screenView()</a> from screenview.o(i._ZN10screenViewD1Ev) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b7]">TouchGFXHAL::initialize()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ca]">TouchGFXHAL::enableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[b9]">TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[cb]">TouchGFXHAL::disableInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d4]">TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c9]">TouchGFXHAL::configureInterrupts()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[cc]">TouchGFXHAL::enableLCDControllerInterrupt()</a> from touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[bf]">TouchGFXHAL::blockCopy(void*, const void*, unsigned)</a> from touchgfxhal.o(i._ZN11TouchGFXHAL9blockCopyEPvPKvj) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[97]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[97]">TouchGFXHAL::~TouchGFXHAL()</a> from touchgfxhal.o(i._ZN11TouchGFXHALD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[99]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
 <LI><a href="#[99]">FrontendHeap::~FrontendHeap()</a> from touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev) referenced from touchgfxconfiguration.o(i.touchgfx_init)
 <LI><a href="#[d9]">screenViewBase::setupScreen()</a> from screenviewbase.o(i._ZN14screenViewBase11setupScreenEv) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[d8]">screenViewBase::~screenViewBase()</a> from screenviewbase.o(i._ZN14screenViewBaseD1Ev) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[dc]">screenPresenter::deactivate()</a> from screenpresenter.o(i._ZN15screenPresenter10deactivateEv) referenced from screenpresenter.o(.constdata__ZTV15screenPresenter)
 <LI><a href="#[db]">screenPresenter::activate()</a> from screenpresenter.o(i._ZN15screenPresenter8activateEv) referenced from screenpresenter.o(.constdata__ZTV15screenPresenter)
 <LI><a href="#[dd]">screenPresenter::~screenPresenter()</a> from screenpresenter.o(i._ZN15screenPresenterD1Ev) referenced from screenpresenter.o(.constdata__ZTV15screenPresenter)
 <LI><a href="#[e2]">FrontendApplication::handleTickEvent()</a> from frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e8]">STM32TouchController::sampleTouch(int&, int&)</a> from stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[e7]">STM32TouchController::init()</a> from stm32touchcontroller.o(i._ZN20STM32TouchController4initEv) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[93]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
 <LI><a href="#[93]">STM32TouchController::~STM32TouchController()</a> from stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[96]">ApplicationFontProvider::~ApplicationFontProvider()</a> from applicationfontprovider.o(i._ZN23ApplicationFontProviderD1Ev) referenced from applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
 <LI><a href="#[96]">ApplicationFontProvider::~ApplicationFontProvider()</a> from applicationfontprovider.o(i._ZN23ApplicationFontProviderD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[9d]">FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()</a> from frontendapplicationbase.o(i._ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv) referenced from frontendapplicationbase.o(.constdata)
 <LI><a href="#[ea]">FrontendApplicationBase::~FrontendApplicationBase()</a> from frontendapplication.o(i._ZN23FrontendApplicationBaseD1Ev) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[f0]">touchgfx::Transition::invalidate()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[f1]">touchgfx::Transition::setScreenContainer(touchgfx::Container&)</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[ef]">touchgfx::Transition::init()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[ee]">touchgfx::Transition::tearDown()</a> from frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[e1]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e1]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e1]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e1]">touchgfx::Application::handleKeyEvent(unsigned char)</a> from application.o(i._ZN8touchgfx11Application14handleKeyEventEh) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[df]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[df]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[df]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[df]">touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</a> from application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[e9]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e9]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e9]">touchgfx::Application::handleTickEvent()</a> from application.o(i._ZN8touchgfx11Application15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[de]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[de]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[de]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[de]">touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</a> from application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[e0]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e0]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e0]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e0]">touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</a> from application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[e6]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e6]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e6]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e6]">touchgfx::Application::cacheDrawOperations(bool)</a> from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[eb]">touchgfx::Application::handlePendingScreenTransition()</a> from application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e5]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e5]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e5]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e5]">touchgfx::Application::draw(touchgfx::Rect&)</a> from application.o(i._ZN8touchgfx11Application4drawERNS_4RectE) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[e4]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e4]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e4]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from application.o(.constdata__ZTVN8touchgfx11ApplicationE)
 <LI><a href="#[e4]">touchgfx::Application::draw()</a> from application.o(i._ZN8touchgfx11Application4drawEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[ed]">touchgfx::NoTransition::handleTickEvent()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[ec]">touchgfx::NoTransition::~NoTransition()</a> from frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
 <LI><a href="#[fd]">touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from togglebutton.o(i._ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[9f]">touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a9]">touchgfx::DMA_Interface::enableAlpha(unsigned char)</a> from dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[aa]">touchgfx::DMA_Interface::disableAlpha()</a> from dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a6]">touchgfx::DMA_Interface::seedExecution()</a> from dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a5]">touchgfx::DMA_Interface::executeCompleted()</a> from dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[ab]">touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</a> from dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a0]">touchgfx::DMA_Interface::flush()</a> from dma.o(i._ZN8touchgfx13DMA_Interface5flushEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a2]">touchgfx::DMA_Interface::start()</a> from dma.o(i._ZN8touchgfx13DMA_Interface5startEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[a4]">touchgfx::DMA_Interface::execute()</a> from dma.o(i._ZN8touchgfx13DMA_Interface7executeEv) referenced from stm32dma.o(.constdata__ZTV10STM32F4DMA)
 <LI><a href="#[72]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
 <LI><a href="#[72]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
 <LI><a href="#[72]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_20_4bpp.o(i._Z23getFont_verdana_20_4bppv)
 <LI><a href="#[72]">touchgfx::GeneratedFont::~GeneratedFont()</a> from generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev) referenced from table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv)
 <LI><a href="#[102]">touchgfx::AbstractButton::executeAction()</a> from button.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[102]">touchgfx::AbstractButton::executeAction()</a> from button.o(i._ZN8touchgfx14AbstractButton13executeActionEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[110]">touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</a> from abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[e3]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from frontendapplication.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV19FrontendApplication)
 <LI><a href="#[e3]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from frontendapplication.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
 <LI><a href="#[e3]">touchgfx::MVPApplication::handlePendingScreenTransition()</a> from frontendapplication.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
 <LI><a href="#[103]">touchgfx::AbstractPartition::~AbstractPartition__sub_object()</a> from abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev) referenced from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[107]">touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[108]">touchgfx::LockFreeDMA_Queue::pop()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[109]">touchgfx::LockFreeDMA_Queue::first()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[106]">touchgfx::LockFreeDMA_Queue::isFull()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[105]">touchgfx::LockFreeDMA_Queue::isEmpty()</a> from dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv) referenced from dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
 <LI><a href="#[d2]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d2]">touchgfx::HAL::beginFrame()</a> from hal.o(i._ZN8touchgfx3HAL10beginFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[10d]">touchgfx::HAL::initialize()</a> from hal.o(i._ZN8touchgfx3HAL10initializeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c0]">touchgfx::HAL::getBlitCaps()</a> from hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c0]">touchgfx::HAL::getBlitCaps()</a> from hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c8]">touchgfx::HAL::backPorchExited()</a> from hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c8]">touchgfx::HAL::backPorchExited()</a> from hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[bc]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[bc]">touchgfx::HAL::lockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c4]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c4]">touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[10e]">touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</a> from hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ba]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ba]">touchgfx::HAL::allowDMATransfers()</a> from hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d0]">touchgfx::HAL::getTFTCurrentLine()</a> from hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d0]">touchgfx::HAL::getTFTCurrentLine()</a> from hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[bd]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[bd]">touchgfx::HAL::unlockFrameBuffer()</a> from hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c7]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c7]">touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</a> from hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[b6]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from hal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[b6]">touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</a> from hal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[ce]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[ce]">touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cd]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from hal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[cd]">touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</a> from hal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d7]">touchgfx::HAL::performDisplayOrientationChange()</a> from hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d7]">touchgfx::HAL::performDisplayOrientationChange()</a> from hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d1]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d1]">touchgfx::HAL::tick()</a> from hal.o(i._ZN8touchgfx3HAL4tickEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d5]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d5]">touchgfx::HAL::touch(int, int)</a> from hal.o(i._ZN8touchgfx3HAL5touchEii) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d6]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d6]">touchgfx::HAL::noTouch()</a> from hal.o(i._ZN8touchgfx3HAL7noTouchEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c1]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c1]">touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c3]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c3]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c2]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c2]">touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c6]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c6]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[c5]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[c5]">touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</a> from hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[d3]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[d3]">touchgfx::HAL::endFrame()</a> from hal.o(i._ZN8touchgfx3HAL8endFrameEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[bb]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[bb]">touchgfx::HAL::flushDMA()</a> from hal.o(i._ZN8touchgfx3HAL8flushDMAEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[10f]">touchgfx::HAL::blockCopy(void*, const void*, unsigned)</a> from hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[cf]">touchgfx::HAL::taskDelay(unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[cf]">touchgfx::HAL::taskDelay(unsigned short)</a> from hal.o(i._ZN8touchgfx3HAL9taskDelayEt) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[b8]">touchgfx::HAL::taskEntry()</a> from hal.o(i._ZN8touchgfx3HAL9taskEntryEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[b8]">touchgfx::HAL::taskEntry()</a> from hal.o(i._ZN8touchgfx3HAL9taskEntryEv) referenced from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[75]">touchgfx::Rect::Rect()</a> from application.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb)
 <LI><a href="#[75]">touchgfx::Rect::Rect()</a> from application.o(i._ZN8touchgfx4RectC1Ev) referenced from application.o(i._ZN8touchgfx11ApplicationC1Ev)
 <LI><a href="#[74]">touchgfx::BlitOp::BlitOp()</a> from stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev) referenced from stm32dma.o(i._ZN10STM32F4DMAC1Ev)
 <LI><a href="#[111]">touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</a> from button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[113]">touchgfx::Screen::setupScreen()</a> from screen.o(i._ZN8touchgfx6Screen11setupScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[b5]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b5]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[b5]">touchgfx::Screen::handleKeyEvent(unsigned char)</a> from screen.o(i._ZN8touchgfx6Screen14handleKeyEventEh) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[da]">touchgfx::Screen::tearDownScreen()</a> from screen.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[da]">touchgfx::Screen::tearDownScreen()</a> from screen.o(i._ZN8touchgfx6Screen14tearDownScreenEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[af]">touchgfx::Screen::afterTransition()</a> from screen.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[af]">touchgfx::Screen::afterTransition()</a> from screen.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[af]">touchgfx::Screen::afterTransition()</a> from screen.o(i._ZN8touchgfx6Screen15afterTransitionEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[b2]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b2]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[b2]">touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</a> from screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[b4]">touchgfx::Screen::handleTickEvent()</a> from screen.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b4]">touchgfx::Screen::handleTickEvent()</a> from screen.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[b4]">touchgfx::Screen::handleTickEvent()</a> from screen.o(i._ZN8touchgfx6Screen15handleTickEventEv) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[b1]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b1]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[b1]">touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</a> from screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[b3]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[b3]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[b3]">touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</a> from screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[ad]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screenview.o(.constdata__ZTV10screenView)
 <LI><a href="#[ad]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screenviewbase.o(.constdata__ZTV14screenViewBase)
 <LI><a href="#[ad]">touchgfx::Screen::draw(touchgfx::Rect&)</a> from screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[112]">touchgfx::Screen::~Screen()</a> from screen.o(i._ZN8touchgfx6ScreenD1Ev) referenced from screen.o(.constdata__ZTVN8touchgfx6ScreenE)
 <LI><a href="#[f6]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f6]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f6]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f6]">touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[114]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</a> from frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[101]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[101]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[101]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[101]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[101]">touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from box.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[ff]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[ff]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[ff]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[ff]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[ff]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[ff]">touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</a> from box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[100]">touchgfx::Drawable::handleTickEvent()</a> from box.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[100]">touchgfx::Drawable::handleTickEvent()</a> from box.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[100]">touchgfx::Drawable::handleTickEvent()</a> from box.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[100]">touchgfx::Drawable::handleTickEvent()</a> from box.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[100]">touchgfx::Drawable::handleTickEvent()</a> from box.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[100]">touchgfx::Drawable::handleTickEvent()</a> from box.o(i._ZN8touchgfx8Drawable15handleTickEventEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[10c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from box.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from box.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[10c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from box.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[10c]">touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</a> from box.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[fe]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[fe]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[fe]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[fe]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[fe]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[fe]">touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</a> from box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[f9]">touchgfx::Drawable::setX(short)</a> from box.o(i._ZN8touchgfx8Drawable4setXEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f9]">touchgfx::Drawable::setX(short)</a> from box.o(i._ZN8touchgfx8Drawable4setXEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f9]">touchgfx::Drawable::setX(short)</a> from box.o(i._ZN8touchgfx8Drawable4setXEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f9]">touchgfx::Drawable::setX(short)</a> from box.o(i._ZN8touchgfx8Drawable4setXEs) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[f9]">touchgfx::Drawable::setX(short)</a> from box.o(i._ZN8touchgfx8Drawable4setXEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[f9]">touchgfx::Drawable::setX(short)</a> from box.o(i._ZN8touchgfx8Drawable4setXEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[fa]">touchgfx::Drawable::setY(short)</a> from box.o(i._ZN8touchgfx8Drawable4setYEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[fa]">touchgfx::Drawable::setY(short)</a> from box.o(i._ZN8touchgfx8Drawable4setYEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[fa]">touchgfx::Drawable::setY(short)</a> from box.o(i._ZN8touchgfx8Drawable4setYEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[fa]">touchgfx::Drawable::setY(short)</a> from box.o(i._ZN8touchgfx8Drawable4setYEs) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[fa]">touchgfx::Drawable::setY(short)</a> from box.o(i._ZN8touchgfx8Drawable4setYEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[fa]">touchgfx::Drawable::setY(short)</a> from box.o(i._ZN8touchgfx8Drawable4setYEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[fb]">touchgfx::Drawable::setWidth(short)</a> from box.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[fb]">touchgfx::Drawable::setWidth(short)</a> from box.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[fb]">touchgfx::Drawable::setWidth(short)</a> from box.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[fb]">touchgfx::Drawable::setWidth(short)</a> from box.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[fb]">touchgfx::Drawable::setWidth(short)</a> from box.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[fb]">touchgfx::Drawable::setWidth(short)</a> from box.o(i._ZN8touchgfx8Drawable8setWidthEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[fc]">touchgfx::Drawable::setHeight(short)</a> from box.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[fc]">touchgfx::Drawable::setHeight(short)</a> from box.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[fc]">touchgfx::Drawable::setHeight(short)</a> from box.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[fc]">touchgfx::Drawable::setHeight(short)</a> from box.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[fc]">touchgfx::Drawable::setHeight(short)</a> from box.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[fc]">touchgfx::Drawable::setHeight(short)</a> from box.o(i._ZN8touchgfx8Drawable9setHeightEs) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[119]">touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[116]">touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[78]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
 <LI><a href="#[78]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
 <LI><a href="#[79]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
 <LI><a href="#[79]">touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
 <LI><a href="#[76]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
 <LI><a href="#[76]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
 <LI><a href="#[77]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
 <LI><a href="#[77]">touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
 <LI><a href="#[7c]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[7c]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[7d]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[7d]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[88]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[88]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
 <LI><a href="#[8c]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
 <LI><a href="#[8c]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
 <LI><a href="#[80]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[80]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[84]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[84]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
 <LI><a href="#[89]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[89]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
 <LI><a href="#[8d]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
 <LI><a href="#[8d]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
 <LI><a href="#[81]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[81]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[7a]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[7a]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[85]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[85]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
 <LI><a href="#[90]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
 <LI><a href="#[90]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
 <LI><a href="#[7b]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[7b]">touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[86]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[86]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
 <LI><a href="#[8a]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
 <LI><a href="#[8a]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
 <LI><a href="#[7e]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[7e]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[91]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
 <LI><a href="#[91]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
 <LI><a href="#[82]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[82]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
 <LI><a href="#[87]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[87]">touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
 <LI><a href="#[8b]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[8b]">touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
 <LI><a href="#[7f]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[7f]">touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
 <LI><a href="#[83]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[83]">touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
 <LI><a href="#[8e]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
 <LI><a href="#[8e]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
 <LI><a href="#[8f]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
 <LI><a href="#[8f]">touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev) referenced from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
 <LI><a href="#[117]">touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[118]">touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[95]">touchgfx::LCD16bpp::~LCD16bpp()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[95]">touchgfx::LCD16bpp::~LCD16bpp()</a> from lcd16bpp.o(i._ZN8touchgfx8LCD16bppD1Ev) referenced from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
 <LI><a href="#[11d]">touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[11e]">touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</a> from container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[120]">touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</a> from container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[11f]">touchgfx::Container::add(touchgfx::Drawable&)</a> from container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[121]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[122]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[123]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[124]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[125]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[126]">touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</a> from touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt) referenced from touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
 <LI><a href="#[be]">TouchGFXHAL::getTFTFrameBuffer() const</a> from touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv) referenced from touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
 <LI><a href="#[10b]">touchgfx::Box::getSolidRect() const</a> from box.o(i._ZNK8touchgfx3Box12getSolidRectEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[10a]">touchgfx::Box::draw(const touchgfx::Rect&) const</a> from box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f3]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f3]">touchgfx::Button::getSolidRect() const</a> from button.o(i._ZNK8touchgfx6Button12getSolidRectEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f2]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f2]">touchgfx::Button::draw(const touchgfx::Rect&) const</a> from button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[115]">touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</a> from frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv) referenced from frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
 <LI><a href="#[f5]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f5]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f5]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f5]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[f5]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[f5]">touchgfx::Drawable::invalidate() const</a> from drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[f7]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f7]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f7]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f7]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[f7]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[f7]">touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[f4]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f4]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f4]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f4]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[f4]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[f4]">touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[f8]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
 <LI><a href="#[f8]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from box.o(.constdata__ZTVN8touchgfx3BoxE)
 <LI><a href="#[f8]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from button.o(.constdata__ZTVN8touchgfx6ButtonE)
 <LI><a href="#[f8]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[f8]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[f8]">touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</a> from drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[11a]">touchgfx::LCD16bpp::framebufferFormat() const</a> from lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferFormatEv) referenced from lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
 <LI><a href="#[11c]">touchgfx::Container::getSolidRect() const</a> from container.o(i._ZNK8touchgfx9Container12getSolidRectEv) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[11b]">touchgfx::Container::draw(const touchgfx::Rect&) const</a> from container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE) referenced from container.o(.constdata__ZTVN8touchgfx9ContainerE)
 <LI><a href="#[104]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
 <LI><a href="#[104]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from hal.o(.constdata__ZTVN8touchgfx3HALE)
 <LI><a href="#[104]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from texts.o(.constdata__ZTVN8touchgfx4FontE)
 <LI><a href="#[104]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
 <LI><a href="#[104]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
 <LI><a href="#[104]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
 <LI><a href="#[6f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[129]">__sti___15_Application_cpp</a> from application.o(i.__sti___15_Application_cpp) referenced from application.o(.init_array)
 <LI><a href="#[127]">__sti___21_typedtextdatabase_cpp_05ec7672</a> from typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672) referenced from typedtextdatabase.o(.init_array)
 <LI><a href="#[128]">__sti___25_TouchGFXConfiguration_cpp_f5abfd34</a> from touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34) referenced from touchgfxconfiguration.o(.init_array)
 <LI><a href="#[12a]">__sti___7_LCD_cpp</a> from lcd.o(i.__sti___7_LCD_cpp) referenced from lcd.o(.init_array)
 <LI><a href="#[92]">fputc</a> from main.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[6d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[98]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[269]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[12c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12e]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[26b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[26c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[26d]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[26e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12f]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[26f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25f]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[25e]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[153]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
</UL>

<P><STRONG><a name="[12b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[274]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[275]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[228]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[130]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[12d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[276]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f9]"></a>CRC_Lock</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, stm32_crc_lock.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[13d]"></a>CT_IIC_Ack</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ctiic.o(i.CT_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CT_IIC_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[140]"></a>CT_IIC_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ctiic.o(i.CT_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
</UL>

<P><STRONG><a name="[143]"></a>CT_IIC_NAck</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ctiic.o(i.CT_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[144]"></a>CT_IIC_Read_Byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ctiic.o(i.CT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_RD_Reg
</UL>

<P><STRONG><a name="[146]"></a>CT_IIC_Send_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CT_IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_WR_Reg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_RD_Reg
</UL>

<P><STRONG><a name="[147]"></a>CT_IIC_Start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ctiic.o(i.CT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CT_IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_WR_Reg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_RD_Reg
</UL>

<P><STRONG><a name="[148]"></a>CT_IIC_Stop</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ctiic.o(i.CT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_WR_Reg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_RD_Reg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[149]"></a>CT_IIC_Wait_Ack</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ctiic.o(i.CT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_WR_Reg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_RD_Reg
</UL>

<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; GT1151_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[165]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_IRQHandler &rArr; HAL_FLASH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.FMC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_IRQHandler &rArr; HAL_SDRAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[18d]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[14f]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[18b]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.FPU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>GT1151_Init</STRONG> (Thumb, 136 bytes, Stack size 296 bytes, gt1151q_iic_driver.o(i.GT1151_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GT1151_Init &rArr; CT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>GT1151_RD_Reg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gt1151q_iic_driver.o(i.GT1151_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GT1151_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[155]"></a>GT1151_WR_Reg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gt1151q_iic_driver.o(i.GT1151_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GT1151_WR_Reg &rArr; CT_IIC_Wait_Ack &rArr; CT_IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[156]"></a>HAL_CRC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[158]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dma2d.o(i.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dma2d.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[152]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
</UL>

<P><STRONG><a name="[164]"></a>HAL_FLASH_EndOfOperationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_EndOfOperationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_FLASH_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FLASH_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OperationErrorCallback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_EndOfOperationCallback
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>HAL_FLASH_OperationErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_OperationErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, gt1151q_iic_driver.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; GT1151_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_WR_Reg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; GT1151_RD_Reg &rArr; CT_IIC_Read_Byte &rArr; CT_IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_GPIO_Init</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[145]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[13e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
</UL>

<P><STRONG><a name="[150]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[19e]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[169]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_ER_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>HAL_LTDC_Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[17a]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_ProgramLineEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[177]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_ltdc.o(i.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_MspInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[15c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[16a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[182]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_PVDCallback))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVD_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_PWR_PVD_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_PVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[184]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16d]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[185]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[186]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14e]"></a>HAL_SDRAM_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_RefreshErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[189]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fmc.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
</UL>

<P><STRONG><a name="[187]"></a>HAL_SDRAM_RefreshErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_RefreshErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
</UL>

<P><STRONG><a name="[191]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[18f]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI5_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_SPI_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[194]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[197]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.LTDC_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LTDC_ER_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LTDC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; touchgfx::OSWrappers::signalVSync() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>MX_CRC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ac]"></a>MX_DMA2D_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma2d.o(i.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>MX_DMA_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>MX_FMC_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, fmc.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_InitEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>MX_GPIO_Init</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>MX_LTDC_Init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, ltdc.o(i.MX_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>MX_SDRAM_InitEx</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, fmc.o(i.MX_SDRAM_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SDRAM_InitEx &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[1b4]"></a>MX_SPI5_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spi.o(i.MX_SPI5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI5_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>MX_TIM14_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tim.o(i.MX_TIM14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_TIM14_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>MX_TouchGFX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_touchgfx.o(i.MX_TouchGFX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TouchGFX_Init &rArr; touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>MX_TouchGFX_Process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_touchgfx.o(i.MX_TouchGFX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TouchGFX_Process &rArr; touchgfx_taskEntry &rArr; touchgfx::HAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[1ba]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PVD_IRQHandler &rArr; HAL_PWR_PVD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SPI5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI5_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>StartDefaultTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = StartDefaultTask &rArr; MX_TouchGFX_Process &rArr; touchgfx_taskEntry &rArr; touchgfx::HAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>StartTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertos.o(i.StartTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>SystemClock_Config</STRONG> (Thumb, 180 bytes, Stack size 136 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1e4]"></a>Touch_Poll</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gt1151q_iic_driver.o(i.Touch_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Touch_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32TouchController::sampleTouch(int&, int&)
</UL>

<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>getFont_verdana_10_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = getFont_verdana_10_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[1c7]"></a>getFont_verdana_20_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, table_verdana_20_4bpp.o(i._Z23getFont_verdana_20_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = getFont_verdana_20_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[1c8]"></a>getFont_verdana_40_4bpp()</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = getFont_verdana_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_typedtextdatabase_cpp_05ec7672
</UL>

<P><STRONG><a name="[a1]"></a>STM32F4DMA::initialize()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32dma.o(i._ZN10STM32F4DMA10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F4DMA::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[9e]"></a>STM32F4DMA::getBlitCaps()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN10STM32F4DMA11getBlitCapsEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a7]"></a>STM32F4DMA::setupDataCopy(const touchgfx::BlitOp&)</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32dma.o(i._ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32F4DMA::setupDataCopy(const touchgfx::BlitOp&) &rArr; STM32F4DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a8]"></a>STM32F4DMA::setupDataFill(const touchgfx::BlitOp&)</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32dma.o(i._ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32F4DMA::setupDataFill(const touchgfx::BlitOp&) &rArr; STM32F4DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a3]"></a>STM32F4DMA::signalDMAInterrupt()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN10STM32F4DMA18signalDMAInterruptEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[1c9]"></a>STM32F4DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32dma.o(i._ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F4DMA::getChromARTInputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[1ca]"></a>STM32F4DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32dma.o(i._ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM32F4DMA::getChromARTOutputFormat(touchgfx::Bitmap::BitmapFormat)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::setupDataFill(const touchgfx::BlitOp&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::setupDataCopy(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[1cb]"></a>STM32F4DMA::STM32F4DMA()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32dma.o(i._ZN10STM32F4DMAC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STM32F4DMA::STM32F4DMA() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[27a]"></a>STM32F4DMA::STM32F4DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32dma.o(i._ZN10STM32F4DMAC1Ev), UNUSED)

<P><STRONG><a name="[94]"></a>STM32F4DMA::~STM32F4DMA()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32dma.o(i._ZN10STM32F4DMAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[27b]"></a>STM32F4DMA::~STM32F4DMA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN10STM32F4DMAD1Ev), UNUSED)

<P><STRONG><a name="[ae]"></a>screenView::setupScreen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, screenview.o(i._ZN10screenView11setupScreenEv))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenview.o(.constdata__ZTV10screenView)
</UL>
<P><STRONG><a name="[b0]"></a>screenView::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screenview.o(i._ZN10screenView14tearDownScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screenview.o(.constdata__ZTV10screenView)
</UL>
<P><STRONG><a name="[1ce]"></a>screenView::screenView()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, screenview.o(i._ZN10screenViewC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = screenView::screenView() &rArr; screenViewBase::screenViewBase() &rArr; touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[27c]"></a>screenView::screenView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screenview.o(i._ZN10screenViewC1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>screenView::~screenView()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screenview.o(i._ZN10screenViewD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screenview.o(.constdata__ZTV10screenView)
</UL>
<P><STRONG><a name="[27d]"></a>screenView::~screenView__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screenview.o(i._ZN10screenViewD1Ev), UNUSED)

<P><STRONG><a name="[b7]"></a>TouchGFXHAL::initialize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[ca]"></a>TouchGFXHAL::enableInterrupts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::enableInterrupts() &rArr; TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[b9]"></a>TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[cb]"></a>TouchGFXHAL::disableInterrupts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::disableInterrupts() &rArr; TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[d4]"></a>TouchGFXHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL17setTFTFrameBufferEPt))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[c9]"></a>TouchGFXHAL::configureInterrupts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXHAL::configureInterrupts() &rArr; TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[cc]"></a>TouchGFXHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL28enableLCDControllerInterruptEv))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[bf]"></a>TouchGFXHAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHAL9blockCopyEPvPKvj))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[97]"></a>TouchGFXHAL::~TouchGFXHAL()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
</UL>
<P><STRONG><a name="[27e]"></a>TouchGFXHAL::~TouchGFXHAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZN11TouchGFXHALD1Ev), UNUSED)

<P><STRONG><a name="[1d8]"></a>FrontendHeap::FrontendHeap()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FrontendHeap::FrontendHeap() &rArr; FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::Model()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoscreenScreenNoTransition()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::AbstractPartition__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[27f]"></a>FrontendHeap::FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapC1Ev), UNUSED)

<P><STRONG><a name="[99]"></a>FrontendHeap::~FrontendHeap()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrontendHeap::~FrontendHeap()
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::~FrontendApplicationBase()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractPartition::~AbstractPartition__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.touchgfx_init)
<LI> touchgfxconfiguration.o(.constdata__ZTV12FrontendHeap)
</UL>
<P><STRONG><a name="[280]"></a>FrontendHeap::~FrontendHeap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, touchgfxconfiguration.o(i._ZN12FrontendHeapD1Ev), UNUSED)

<P><STRONG><a name="[255]"></a>BitmapDatabase::getInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[254]"></a>BitmapDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bitmapdatabase.o(i._ZN14BitmapDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[d9]"></a>screenViewBase::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screenviewbase.o(i._ZN14screenViewBase11setupScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenView::setupScreen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
</UL>
<P><STRONG><a name="[1cf]"></a>screenViewBase::screenViewBase()</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, screenviewbase.o(i._ZN14screenViewBaseC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = screenViewBase::screenViewBase() &rArr; touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::add(touchgfx::Drawable&)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::Screen()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::setXY(short, short)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenView::screenView()
</UL>

<P><STRONG><a name="[281]"></a>screenViewBase::screenViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, screenviewbase.o(i._ZN14screenViewBaseC1Ev), UNUSED)

<P><STRONG><a name="[d8]"></a>screenViewBase::~screenViewBase()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, screenviewbase.o(i._ZN14screenViewBaseD1Ev))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::View&lang;screenPresenter&rang;::~View()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
</UL>
<P><STRONG><a name="[282]"></a>screenViewBase::~screenViewBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screenviewbase.o(i._ZN14screenViewBaseD1Ev), UNUSED)

<P><STRONG><a name="[dc]"></a>screenPresenter::deactivate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screenpresenter.o(i._ZN15screenPresenter10deactivateEv))
<BR>[Address Reference Count : 1]<UL><LI> screenpresenter.o(.constdata__ZTV15screenPresenter)
</UL>
<P><STRONG><a name="[db]"></a>screenPresenter::activate()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screenpresenter.o(i._ZN15screenPresenter8activateEv))
<BR>[Address Reference Count : 1]<UL><LI> screenpresenter.o(.constdata__ZTV15screenPresenter)
</UL>
<P><STRONG><a name="[267]"></a>screenPresenter::screenPresenter(screenView&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, screenpresenter.o(i._ZN15screenPresenterC1ER10screenView))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[283]"></a>screenPresenter::screenPresenter__sub_object(screenView&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screenpresenter.o(i._ZN15screenPresenterC1ER10screenView), UNUSED)

<P><STRONG><a name="[dd]"></a>screenPresenter::~screenPresenter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screenpresenter.o(i._ZN15screenPresenterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screenpresenter.o(.constdata__ZTV15screenPresenter)
</UL>
<P><STRONG><a name="[284]"></a>screenPresenter::~screenPresenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screenpresenter.o(i._ZN15screenPresenterD1Ev), UNUSED)

<P><STRONG><a name="[20a]"></a>TypedTextDatabase::getInstanceSize()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase15getInstanceSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[209]"></a>TypedTextDatabase::getFonts()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, typedtextdatabase.o(i._ZN17TypedTextDatabase8getFontsEv))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
</UL>

<P><STRONG><a name="[e2]"></a>FrontendApplication::handleTickEvent()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplication15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FrontendApplication::handleTickEvent() &rArr; touchgfx::Application::handleTickEvent()
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::handleTickEvent()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model::tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
</UL>
<P><STRONG><a name="[1db]"></a>FrontendApplication::FrontendApplication(Model&, FrontendHeap&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FrontendApplication::FrontendApplication(Model&, FrontendHeap&) &rArr; FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[285]"></a>FrontendApplication::FrontendApplication__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN19FrontendApplicationC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[e8]"></a>STM32TouchController::sampleTouch(int&, int&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController11sampleTouchERiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM32TouchController::sampleTouch(int&, int&) &rArr; Touch_Poll
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[e7]"></a>STM32TouchController::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchController4initEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
</UL>
<P><STRONG><a name="[93]"></a>STM32TouchController::~STM32TouchController()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> stm32touchcontroller.o(.constdata__ZTV20STM32TouchController)
<LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
</UL>
<P><STRONG><a name="[286]"></a>STM32TouchController::~STM32TouchController__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32touchcontroller.o(i._ZN20STM32TouchControllerD1Ev), UNUSED)

<P><STRONG><a name="[1d0]"></a>TouchGFXGeneratedHAL::initialize()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
</UL>

<P><STRONG><a name="[1d1]"></a>TouchGFXGeneratedHAL::enableInterrupts()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16enableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::enableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableInterrupts()
</UL>

<P><STRONG><a name="[1d2]"></a>TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>

<P><STRONG><a name="[1d3]"></a>TouchGFXGeneratedHAL::disableInterrupts()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17disableInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::disableInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::disableInterrupts()
</UL>

<P><STRONG><a name="[1d4]"></a>TouchGFXGeneratedHAL::setTFTFrameBuffer(unsigned short*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::setTFTFrameBuffer(unsigned short*)
</UL>

<P><STRONG><a name="[1d5]"></a>TouchGFXGeneratedHAL::configureInterrupts()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL19configureInterruptsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchGFXGeneratedHAL::configureInterrupts()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::configureInterrupts()
</UL>

<P><STRONG><a name="[1d6]"></a>TouchGFXGeneratedHAL::enableLCDControllerInterrupt()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::enableLCDControllerInterrupt()
</UL>

<P><STRONG><a name="[1d7]"></a>TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvj))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::blockCopy(void*, const void*, unsigned)
</UL>

<P><STRONG><a name="[96]"></a>ApplicationFontProvider::~ApplicationFontProvider()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, applicationfontprovider.o(i._ZN23ApplicationFontProviderD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> applicationfontprovider.o(.constdata__ZTV23ApplicationFontProvider)
<LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
</UL>
<P><STRONG><a name="[287]"></a>ApplicationFontProvider::~ApplicationFontProvider__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, applicationfontprovider.o(i._ZN23ApplicationFontProviderD1Ev), UNUSED)

<P><STRONG><a name="[1dc]"></a>FrontendApplicationBase::gotoscreenScreenNoTransition()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[9d]"></a>FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FrontendApplicationBase::gotoscreenScreenNoTransitionImpl() &rArr; T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; screenView::screenView() &rArr; screenViewBase::screenViewBase() &rArr; touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&) &rArr; touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::FrontendApplication(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[288]"></a>FrontendApplicationBase::FrontendApplicationBase__sub_object(Model&, FrontendHeap&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, frontendapplicationbase.o(i._ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap), UNUSED)

<P><STRONG><a name="[ea]"></a>FrontendApplicationBase::~FrontendApplicationBase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplication.o(i._ZN23FrontendApplicationBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
</UL>
<P><STRONG><a name="[289]"></a>FrontendApplicationBase::~FrontendApplicationBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplication.o(i._ZN23FrontendApplicationBaseD1Ev), UNUSED)

<P><STRONG><a name="[1e2]"></a>Model::tick()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(i._ZN5Model4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>

<P><STRONG><a name="[1da]"></a>Model::Model()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[28a]"></a>Model::Model__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, model.o(i._ZN5ModelC1Ev), UNUSED)

<P><STRONG><a name="[1ec]"></a>touchgfx::OSWrappers::initialize()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::OSWrappers::initialize() &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::initialize()
</UL>

<P><STRONG><a name="[17b]"></a>touchgfx::OSWrappers::signalVSync()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers11signalVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::signalVSync() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[1ef]"></a>touchgfx::OSWrappers::waitForVSync()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers12waitForVSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::waitForVSync() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::taskEntry()
</UL>

<P><STRONG><a name="[1f1]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphore()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::unlockFrameBuffer()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[1f2]"></a>touchgfx::OSWrappers::takeFrameBufferSemaphore()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::waitForFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[1f3]"></a>touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[1f4]"></a>touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oswrappers.o(i._ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::executeCompleted()
</UL>

<P><STRONG><a name="[f0]"></a>touchgfx::Transition::invalidate()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Transition::invalidate()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[f1]"></a>touchgfx::Transition::setScreenContainer(touchgfx::Container&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[ef]"></a>touchgfx::Transition::init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition4initEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[ee]"></a>touchgfx::Transition::tearDown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx10Transition8tearDownEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[1e5]"></a>touchgfx::Application::getInstance()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application11getInstanceEv))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Transition::invalidate()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>

<P><STRONG><a name="[e1]"></a>touchgfx::Application::handleKeyEvent(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application14handleKeyEventEh))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1f5]"></a>touchgfx::Application::invalidateArea(touchgfx::Rect)</STRONG> (Thumb, 2256 bytes, Stack size 144 bytes, application.o(i._ZN8touchgfx11Application14invalidateAreaENS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
</UL>

<P><STRONG><a name="[df]"></a>touchgfx::Application::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[e9]"></a>touchgfx::Application::handleTickEvent()</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, application.o(i._ZN8touchgfx11Application15handleTickEventEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Application::handleTickEvent()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplication::handleTickEvent()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[de]"></a>touchgfx::Application::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[e0]"></a>touchgfx::Application::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[e6]"></a>touchgfx::Application::cacheDrawOperations(bool)</STRONG> (Thumb, 1662 bytes, Stack size 200 bytes, application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = touchgfx::Application::cacheDrawOperations(bool) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[266]"></a>touchgfx::Application::clearAllTimerWidgets()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application20clearAllTimerWidgetsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[eb]"></a>touchgfx::Application::handlePendingScreenTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx11Application29handlePendingScreenTransitionEv))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[e5]"></a>touchgfx::Application::draw(touchgfx::Rect&)</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, application.o(i._ZN8touchgfx11Application4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = touchgfx::Application::draw(touchgfx::Rect&) &rArr; touchgfx::Application::invalidateArea(touchgfx::Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[e4]"></a>touchgfx::Application::draw()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11Application4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Application::draw()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
<LI> application.o(.constdata__ZTVN8touchgfx11ApplicationE)
</UL>
<P><STRONG><a name="[1ea]"></a>touchgfx::Application::Application()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Application::Application() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[28b]"></a>touchgfx::Application::Application__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, application.o(i._ZN8touchgfx11ApplicationC1Ev), UNUSED)

<P><STRONG><a name="[256]"></a>touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fontmanager.o(i._ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[ed]"></a>touchgfx::NoTransition::handleTickEvent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransition15handleTickEventEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[ec]"></a>touchgfx::NoTransition::~NoTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx12NoTransitionE)
</UL>
<P><STRONG><a name="[28c]"></a>touchgfx::NoTransition::~NoTransition__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frontendapplicationbase.o(i._ZN8touchgfx12NoTransitionD1Ev), UNUSED)

<P><STRONG><a name="[fd]"></a>touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, togglebutton.o(i._ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
</UL>
<P><STRONG><a name="[9f]"></a>touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&) &rArr; touchgfx::OSWrappers::tryTakeFrameBufferSemaphore() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a9]"></a>touchgfx::DMA_Interface::enableAlpha(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface11enableAlphaEh))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[aa]"></a>touchgfx::DMA_Interface::disableAlpha()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface12disableAlphaEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a6]"></a>touchgfx::DMA_Interface::seedExecution()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface13seedExecutionEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[202]"></a>touchgfx::DMA_Interface::isDmaQueueEmpty()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::lockFrameBuffer()
</UL>

<P><STRONG><a name="[a5]"></a>touchgfx::DMA_Interface::executeCompleted()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface16executeCompletedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::executeCompleted() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[ab]"></a>touchgfx::DMA_Interface::waitForFrameBufferSemaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::DMA_Interface::waitForFrameBufferSemaphore() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a0]"></a>touchgfx::DMA_Interface::flush()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx13DMA_Interface5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a2]"></a>touchgfx::DMA_Interface::start()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx13DMA_Interface5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::DMA_Interface::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[a4]"></a>touchgfx::DMA_Interface::execute()</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, dma.o(i._ZN8touchgfx13DMA_Interface7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::DMA_Interface::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(.constdata__ZTV10STM32F4DMA)
</UL>
<P><STRONG><a name="[1c6]"></a>touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
</UL>

<P><STRONG><a name="[28d]"></a>touchgfx::GeneratedFont::GeneratedFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE), UNUSED)

<P><STRONG><a name="[72]"></a>touchgfx::GeneratedFont::~GeneratedFont()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev))
<BR>[Address Reference Count : 4]<UL><LI> generatedfont.o(.constdata__ZTVN8touchgfx13GeneratedFontE)
<LI> table_verdana_20_4bpp.o(i._Z23getFont_verdana_20_4bppv)
<LI> table_verdana_40_4bpp.o(i._Z23getFont_verdana_40_4bppv)
<LI> table_verdana_10_4bpp.o(i._Z23getFont_verdana_10_4bppv)
</UL>
<P><STRONG><a name="[28e]"></a>touchgfx::GeneratedFont::~GeneratedFont__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, generatedfont.o(i._ZN8touchgfx13GeneratedFontD1Ev), UNUSED)

<P><STRONG><a name="[102]"></a>touchgfx::AbstractButton::executeAction()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, button.o(i._ZN8touchgfx14AbstractButton13executeActionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::AbstractButton::executeAction()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[110]"></a>touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, abstractbutton.o(i._ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::AbstractButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::ToggleButton::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[e3]"></a>touchgfx::MVPApplication::handlePendingScreenTransition()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, frontendapplication.o(i._ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::MVPApplication::handlePendingScreenTransition()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> frontendapplication.o(.constdata__ZTV19FrontendApplication)
<LI> frontendapplication.o(.constdata__ZTV23FrontendApplicationBase)
<LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx14MVPApplicationE)
</UL>
<P><STRONG><a name="[1fd]"></a>touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[1ff]"></a>touchgfx::TouchCalibration::clzu(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration4clzuEj))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[1fe]"></a>touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)</STRONG> (Thumb, 170 bytes, Stack size 44 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration6muldivEiiiiRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>

<P><STRONG><a name="[200]"></a>touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, touchcalibration.o(i._ZN8touchgfx16TouchCalibration7muldivuEjjjjjRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::clzu(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::muldiv(int, int, int, int, int&)
</UL>

<P><STRONG><a name="[1d9]"></a>touchgfx::AbstractPartition::AbstractPartition__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
</UL>

<P><STRONG><a name="[28f]"></a>touchgfx::AbstractPartition::~AbstractPartition()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev), UNUSED)

<P><STRONG><a name="[103]"></a>touchgfx::AbstractPartition::~AbstractPartition__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abstractpartition.o(i._ZN8touchgfx17AbstractPartitionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::~FrontendHeap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
</UL>
<P><STRONG><a name="[107]"></a>touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pushCopyOf(const touchgfx::BlitOp&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[108]"></a>touchgfx::LockFreeDMA_Queue::pop()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::LockFreeDMA_Queue::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[109]"></a>touchgfx::LockFreeDMA_Queue::first()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue5firstEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[106]"></a>touchgfx::LockFreeDMA_Queue::isFull()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue6isFullEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[105]"></a>touchgfx::LockFreeDMA_Queue::isEmpty()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv))
<BR>[Address Reference Count : 1]<UL><LI> dma.o(.constdata__ZTVN8touchgfx17LockFreeDMA_QueueE)
</UL>
<P><STRONG><a name="[1cc]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::STM32F4DMA()
</UL>

<P><STRONG><a name="[290]"></a>touchgfx::LockFreeDMA_Queue::LockFreeDMA_Queue__sub_object(touchgfx::BlitOp*, unsigned long)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dma.o(i._ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEm), UNUSED)

<P><STRONG><a name="[1f8]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[213]"></a>touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[1f7]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(touchgfx::Rect&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
</UL>

<P><STRONG><a name="[205]"></a>touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, displaytransformation.o(i._ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[d2]"></a>touchgfx::HAL::beginFrame()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL10beginFrameEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[10d]"></a>touchgfx::HAL::initialize()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL10initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::initialize()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c0]"></a>touchgfx::HAL::getBlitCaps()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL11getBlitCapsEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c8]"></a>touchgfx::HAL::backPorchExited()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL15backPorchExitedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::backPorchExited()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[bc]"></a>touchgfx::HAL::lockFrameBuffer()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal.o(i._ZN8touchgfx3HAL15lockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = touchgfx::HAL::lockFrameBuffer() &rArr; touchgfx::OSWrappers::takeFrameBufferSemaphore() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::isDmaQueueEmpty()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c4]"></a>touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::HAL::blitCopyARGB8888(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[10e]"></a>touchgfx::HAL::flushFrameBuffer(const touchgfx::Rect&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[17c]"></a>touchgfx::HAL::swapFrameBuffers()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL16swapFrameBuffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::swapFrameBuffers()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[ba]"></a>touchgfx::HAL::allowDMATransfers()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17allowDMATransfersEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d0]"></a>touchgfx::HAL::getTFTCurrentLine()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17getTFTCurrentLineEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[bd]"></a>touchgfx::HAL::unlockFrameBuffer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL17unlockFrameBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::unlockFrameBuffer() &rArr; touchgfx::OSWrappers::giveFrameBufferSemaphore() &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[1fb]"></a>touchgfx::HAL::setRenderingMethod(touchgfx::HAL::RenderingMethod)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DMA_Interface::addToQueue(const touchgfx::BlitOp&)
</UL>

<P><STRONG><a name="[c7]"></a>touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[b6]"></a>touchgfx::HAL::setDisplayOrientation(touchgfx::DisplayOrientation)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[ce]"></a>touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, hal.o(i._ZN8touchgfx3HAL27configurePartialFrameBufferEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::HAL::configurePartialFrameBuffer(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[cd]"></a>touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::setFrameBufferStartAddresses(void*, void*, void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d7]"></a>touchgfx::HAL::performDisplayOrientationChange()</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, hal.o(i._ZN8touchgfx3HAL31performDisplayOrientationChangeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = touchgfx::HAL::performDisplayOrientationChange()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d1]"></a>touchgfx::HAL::tick()</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, hal.o(i._ZN8touchgfx3HAL4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::HAL::tick()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::tick()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d5]"></a>touchgfx::HAL::touch(int, int)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, hal.o(i._ZN8touchgfx3HAL5touchEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = touchgfx::HAL::touch(int, int) &rArr; touchgfx::TouchCalibration::translatePoint(touchgfx::Point&) &rArr; touchgfx::TouchCalibration::muldiv(int, int, int, int, int&) &rArr; touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) &rArr;  touchgfx::TouchCalibration::muldivu(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformFrameBufferToDisplay(short&, short&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::TouchCalibration::translatePoint(touchgfx::Point&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d6]"></a>touchgfx::HAL::noTouch()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL7noTouchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::HAL::noTouch() &rArr; touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c1]"></a>touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, const unsigned char*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c3]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c2]"></a>touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, hal.o(i._ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::HAL::blitCopy(const unsigned short*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool, unsigned short, touchgfx::Bitmap::BitmapFormat, touchgfx::Bitmap::BitmapFormat, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c6]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[c5]"></a>touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, hal.o(i._ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::HAL::blitFill(touchgfx::colortype, unsigned short, unsigned short, unsigned short, unsigned short, unsigned char, unsigned short, touchgfx::Bitmap::BitmapFormat, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[d3]"></a>touchgfx::HAL::endFrame()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal.o(i._ZN8touchgfx3HAL8endFrameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::HAL::endFrame()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[bb]"></a>touchgfx::HAL::flushDMA()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL8flushDMAEv))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[10f]"></a>touchgfx::HAL::blockCopy(void*, const void*, unsigned)</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL9blockCopyEPvPKvj))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::blockCopy(void*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[cf]"></a>touchgfx::HAL::taskDelay(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL9taskDelayEt))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[b8]"></a>touchgfx::HAL::taskEntry()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal.o(i._ZN8touchgfx3HAL9taskEntryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx::HAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_taskEntry
</UL>
<BR>[Address Reference Count : 2]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
</UL>
<P><STRONG><a name="[22a]"></a>touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i._ZN8touchgfx3HALC2ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[17d]"></a>touchgfx::GPIO::set(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO3setENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[17e]"></a>touchgfx::GPIO::clear(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[201]"></a>touchgfx::GPIO::toggle(touchgfx::GPIO::GPIO_ID)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, touchgfxgpio.o(i._ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::swapFrameBuffers()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::backPorchExited()
</UL>

<P><STRONG><a name="[75]"></a>touchgfx::Rect::Rect()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx4RectC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> application.o(i._ZN8touchgfx11Application19cacheDrawOperationsEb)
<LI> application.o(i._ZN8touchgfx11ApplicationC1Ev)
</UL>
<P><STRONG><a name="[291]"></a>touchgfx::Rect::Rect__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, application.o(i._ZN8touchgfx4RectC1Ev), UNUSED)

<P><STRONG><a name="[1e1]"></a>touchgfx::View&lang;screenPresenter&rang;::~View()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screenviewbase.o(i._ZN8touchgfx4ViewI15screenPresenterED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::~screenViewBase()
</UL>

<P><STRONG><a name="[292]"></a>touchgfx::View&lang;screenPresenter&rang;::~View__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screenviewbase.o(i._ZN8touchgfx4ViewI15screenPresenterED1Ev), UNUSED)

<P><STRONG><a name="[208]"></a>touchgfx::Texts::setLanguage(unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, texts.o(i._ZN8touchgfx5Texts11setLanguageEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Texts::setLanguage(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getFonts()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TypedTextDatabase::getInstanceSize()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[20c]"></a>touchgfx::Bitmap::clearCache()</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, bitmap.o(i._ZN8touchgfx6Bitmap10clearCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[20b]"></a>touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bitmap.o(i._ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned) &rArr; touchgfx::Bitmap::clearCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::clearCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
</UL>

<P><STRONG><a name="[74]"></a>touchgfx::BlitOp::BlitOp()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN10STM32F4DMAC1Ev)
</UL>
<P><STRONG><a name="[293]"></a>touchgfx::BlitOp::BlitOp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32dma.o(i._ZN8touchgfx6BlitOpC1Ev), UNUSED)

<P><STRONG><a name="[111]"></a>touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, button.o(i._ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&) &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[1df]"></a>touchgfx::Button::Button()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screenviewbase.o(i._ZN8touchgfx6ButtonC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Button::Button() &rArr; touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Widget::Widget__sub_object()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
</UL>

<P><STRONG><a name="[294]"></a>touchgfx::Button::Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screenviewbase.o(i._ZN8touchgfx6ButtonC1Ev), UNUSED)

<P><STRONG><a name="[113]"></a>touchgfx::Screen::setupScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen11setupScreenEv))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[268]"></a>touchgfx::Screen::bindTransition(touchgfx::Transition&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)
</UL>

<P><STRONG><a name="[b5]"></a>touchgfx::Screen::handleKeyEvent(unsigned char)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14handleKeyEventEh))
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[da]"></a>touchgfx::Screen::tearDownScreen()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen14tearDownScreenEv))
<BR>[Address Reference Count : 2]<UL><LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[af]"></a>touchgfx::Screen::afterTransition()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen15afterTransitionEv))
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[b2]"></a>touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, screen.o(i._ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[b4]"></a>touchgfx::Screen::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6Screen15handleTickEventEv))
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[b1]"></a>touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, screen.o(i._ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&) &rArr; touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[b3]"></a>touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, screen.o(i._ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[ad]"></a>touchgfx::Screen::draw(touchgfx::Rect&)</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, screen.o(i._ZN8touchgfx6Screen4drawERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = touchgfx::Screen::draw(touchgfx::Rect&) &rArr; touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> screenview.o(.constdata__ZTV10screenView)
<LI> screenviewbase.o(.constdata__ZTV14screenViewBase)
<LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[1fa]"></a>touchgfx::Screen::draw()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, screen.o(i._ZN8touchgfx6Screen4drawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Screen::draw()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
</UL>

<P><STRONG><a name="[211]"></a>touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)</STRONG> (Thumb, 788 bytes, Stack size 88 bytes, screen.o(i._ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) &rArr;  touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
</UL>

<P><STRONG><a name="[1dd]"></a>touchgfx::Screen::Screen()</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Screen::Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
</UL>

<P><STRONG><a name="[295]"></a>touchgfx::Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, screen.o(i._ZN8touchgfx6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[112]"></a>touchgfx::Screen::~Screen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.constdata__ZTVN8touchgfx6ScreenE)
</UL>
<P><STRONG><a name="[296]"></a>touchgfx::Screen::~Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen.o(i._ZN8touchgfx6ScreenD1Ev), UNUSED)

<P><STRONG><a name="[f6]"></a>touchgfx::Widget::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE))
<BR>[Address Reference Count : 4]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[1de]"></a>touchgfx::Widget::Widget__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screenviewbase.o(i._ZN8touchgfx6WidgetC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Widget::Widget__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::Rect()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::Button()
</UL>

<P><STRONG><a name="[101]"></a>touchgfx::Drawable::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_))
<BR>[Address Reference Count : 5]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[ff]"></a>touchgfx::Drawable::handleDragEvent(const touchgfx::DragEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[100]"></a>touchgfx::Drawable::handleTickEvent()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable15handleTickEventEv))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[10c]"></a>touchgfx::Drawable::handleClickEvent(const touchgfx::ClickEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE))
<BR>[Address Reference Count : 4]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[fe]"></a>touchgfx::Drawable::handleGestureEvent(const touchgfx::GestureEvent&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[f9]"></a>touchgfx::Drawable::setX(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable4setXEs))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[fa]"></a>touchgfx::Drawable::setY(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable4setYEs))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[1e0]"></a>touchgfx::Drawable::setXY(short, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, screenviewbase.o(i._ZN8touchgfx8Drawable5setXYEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::setXY(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
</UL>

<P><STRONG><a name="[fb]"></a>touchgfx::Drawable::setWidth(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable8setWidthEs))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[fc]"></a>touchgfx::Drawable::setHeight(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, box.o(i._ZN8touchgfx8Drawable9setHeightEs))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[206]"></a>touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, gestures.o(i._ZN8touchgfx8Gestures17registerDragEventEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touchgfx::Gestures::registerDragEvent(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[207]"></a>touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, gestures.o(i._ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::Gestures::registerClickEvent(touchgfx::ClickEvent::ClickEventType, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::noTouch()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::touch(int, int)
</UL>

<P><STRONG><a name="[203]"></a>touchgfx::Gestures::registerEventListener(touchgfx::UIEventListener&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::registerEventListener(touchgfx::UIEventListener&)
</UL>

<P><STRONG><a name="[204]"></a>touchgfx::Gestures::tick()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gestures.o(i._ZN8touchgfx8Gestures4tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::tick()
</UL>

<P><STRONG><a name="[119]"></a>touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD16bpp::fillBuffer(unsigned char*, unsigned short, const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[212]"></a>touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 508 bytes, Stack size 104 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[214]"></a>touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 460 bytes, Stack size 96 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKjRKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[215]"></a>touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[216]"></a>touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[116]"></a>touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 928 bytes, Stack size 88 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool) &rArr; touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getFormat() const
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getData() const
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::hasTransparentPixels() const
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getExtraData() const
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[21d]"></a>touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 498 bytes, Stack size 112 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[21c]"></a>touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKjRKNS_4RectES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[21e]"></a>touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[21f]"></a>touchgfx::LCD16bpp::enableTextureMapperA4()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperA4() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[1eb]"></a>touchgfx::LCD16bpp::enableTextureMapperAll()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperAll() &rArr; touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::FrontendApplicationBase(Model&, FrontendHeap&)
</UL>

<P><STRONG><a name="[224]"></a>touchgfx::LCD16bpp::enableTextureMapperRGB565()</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperRGB565() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[220]"></a>touchgfx::LCD16bpp::enableTextureMapperARGB8888()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperARGB8888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[222]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB565() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[223]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_RGB888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[221]"></a>touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888() &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperAll()
</UL>

<P><STRONG><a name="[78]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
</UL>
<P><STRONG><a name="[297]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_GA::~TextureMapper_A4_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[79]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
</UL>
<P><STRONG><a name="[298]"></a>touchgfx::LCD16bpp::TextureMapper_A4_NearestNeighbor_NoGA::~TextureMapper_A4_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[76]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
</UL>
<P><STRONG><a name="[299]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_GA::~TextureMapper_A4_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[77]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev)
</UL>
<P><STRONG><a name="[29a]"></a>touchgfx::LCD16bpp::TextureMapper_A4_BilinearInterpolation_NoGA::~TextureMapper_A4_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[7c]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[29b]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_RGB565_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[7d]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[29c]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[88]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
</UL>
<P><STRONG><a name="[29d]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[8c]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
</UL>
<P><STRONG><a name="[29e]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[80]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[29f]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[84]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
</UL>
<P><STRONG><a name="[2a0]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[89]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
</UL>
<P><STRONG><a name="[2a1]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
</UL>
<P><STRONG><a name="[2a2]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA::~TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[81]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[2a3]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[7a]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[2a4]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[85]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
</UL>
<P><STRONG><a name="[2a5]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[90]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
</UL>
<P><STRONG><a name="[2a6]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev), UNUSED)

<P><STRONG><a name="[7b]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[2a7]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[86]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
</UL>
<P><STRONG><a name="[2a8]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[8a]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
</UL>
<P><STRONG><a name="[2a9]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[2aa]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[91]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
</UL>
<P><STRONG><a name="[2ab]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[82]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
</UL>
<P><STRONG><a name="[2ac]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[87]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev)
</UL>
<P><STRONG><a name="[2ad]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[8b]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev)
</UL>
<P><STRONG><a name="[2ae]"></a>touchgfx::LCD16bpp::TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA::~TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev)
</UL>
<P><STRONG><a name="[2af]"></a>touchgfx::LCD16bpp::TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[83]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev)
</UL>
<P><STRONG><a name="[2b0]"></a>touchgfx::LCD16bpp::TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[8e]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
</UL>
<P><STRONG><a name="[2b1]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev), UNUSED)

<P><STRONG><a name="[8f]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAE)
<LI> lcd16bpp.o(i._ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev)
</UL>
<P><STRONG><a name="[2b2]"></a>touchgfx::LCD16bpp::TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA::~TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev), UNUSED)

<P><STRONG><a name="[117]"></a>touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[118]"></a>touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::DisplayTransformation::transformDisplayToFrameBuffer(touchgfx::Rect&)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[229]"></a>touchgfx::LCD16bpp::LCD16bpp()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___25_TouchGFXConfiguration_cpp_f5abfd34
</UL>

<P><STRONG><a name="[2b3]"></a>touchgfx::LCD16bpp::LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppC1Ev), UNUSED)

<P><STRONG><a name="[95]"></a>touchgfx::LCD16bpp::~LCD16bpp()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34)
<LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[2b4]"></a>touchgfx::LCD16bpp::~LCD16bpp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZN8touchgfx8LCD16bppD1Ev), UNUSED)

<P><STRONG><a name="[1fc]"></a>touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, constfont.o(i._ZN8touchgfx9ConstFontC2EPKNS_9GlyphNodeEtthhhhhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*)
</UL>

<P><STRONG><a name="[11d]"></a>touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, container.o(i._ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Container::getLastChild(short, short, touchgfx::Drawable**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[11e]"></a>touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, container.o(i._ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[120]"></a>touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)</STRONG> (Thumb, 650 bytes, Stack size 200 bytes, container.o(i._ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*) &rArr; touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[11f]"></a>touchgfx::Container::add(touchgfx::Drawable&)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, container.o(i._ZN8touchgfx9Container3addERNS_8DrawableE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Container::add(touchgfx::Drawable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenViewBase::screenViewBase()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[be]"></a>TouchGFXHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxhal.o(i._ZNK11TouchGFXHAL17getTFTFrameBufferEv))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::getTFTFrameBuffer() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxhal.o(.constdata__ZTV11TouchGFXHAL)
</UL>
<P><STRONG><a name="[225]"></a>TouchGFXGeneratedHAL::getTFTFrameBuffer() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::getTFTFrameBuffer() const
</UL>

<P><STRONG><a name="[10b]"></a>touchgfx::Box::getSolidRect() const</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, box.o(i._ZNK8touchgfx3Box12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = touchgfx::Box::getSolidRect() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[10a]"></a>touchgfx::Box::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, box.o(i._ZNK8touchgfx3Box4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Box::draw(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
</UL>
<P><STRONG><a name="[210]"></a>touchgfx::Rect::operator &(const touchgfx::Rect&) const</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lcd16bpp.o(i._ZNK8touchgfx4RectanERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Rect::operator &(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[218]"></a>touchgfx::Bitmap::getExtraData() const</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getExtraDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[21b]"></a>touchgfx::Bitmap::getSolidRect() const</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::getSolidRect() const
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[21a]"></a>touchgfx::Bitmap::hasTransparentPixels() const</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap20hasTransparentPixelsEv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[217]"></a>touchgfx::Bitmap::getData() const</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap7getDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getData() const
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[20d]"></a>touchgfx::Bitmap::getWidth() const</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap8getWidthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[219]"></a>touchgfx::Bitmap::getFormat() const</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getFormatEv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[20e]"></a>touchgfx::Bitmap::getHeight() const</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bitmap.o(i._ZNK8touchgfx6Bitmap9getHeightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::setBitmaps(const touchgfx::Bitmap&, const touchgfx::Bitmap&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Button::draw(const touchgfx::Rect&) const
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::drawPartialBitmap(const touchgfx::Bitmap&, short, short, const touchgfx::Rect&, unsigned char, bool)
</UL>

<P><STRONG><a name="[f3]"></a>touchgfx::Button::getSolidRect() const</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, button.o(i._ZNK8touchgfx6Button12getSolidRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = touchgfx::Button::getSolidRect() const &rArr; touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getSolidRect() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[f2]"></a>touchgfx::Button::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, button.o(i._ZNK8touchgfx6Button4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = touchgfx::Button::draw(const touchgfx::Rect&) const &rArr; touchgfx::Bitmap::getHeight() const
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getHeight() const
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::getWidth() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
</UL>
<P><STRONG><a name="[f5]"></a>touchgfx::Drawable::invalidate() const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::invalidate() const
</UL>
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[f7]"></a>touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::getVisibleRect(touchgfx::Rect&) const
</UL>
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[f4]"></a>touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, drawable.o(i._ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touchgfx::Drawable::invalidateRect(touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[20f]"></a>touchgfx::Drawable::getAbsoluteRect() const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drawable.o(i._ZNK8touchgfx8Drawable15getAbsoluteRectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = touchgfx::Drawable::getAbsoluteRect() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleGestureEvent(const touchgfx::GestureEvent&)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleClickEvent(const touchgfx::ClickEvent&)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::handleDragEvent(const touchgfx::DragEvent&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::JSMOC(const touchgfx::Rect&, touchgfx::Drawable*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::getLastChildNear(short, short, touchgfx::Drawable**, short*, short*)
</UL>

<P><STRONG><a name="[f8]"></a>touchgfx::Drawable::translateRectToAbsolute(touchgfx::Rect&) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drawable.o(i._ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE))
<BR>[Address Reference Count : 6]<UL><LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> togglebutton.o(.constdata__ZTVN8touchgfx12ToggleButtonE)
<LI> box.o(.constdata__ZTVN8touchgfx3BoxE)
<LI> button.o(.constdata__ZTVN8touchgfx6ButtonE)
<LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[11a]"></a>touchgfx::LCD16bpp::framebufferFormat() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd16bpp.o(i._ZNK8touchgfx8LCD16bpp17framebufferFormatEv))
<BR>[Address Reference Count : 1]<UL><LI> lcd16bpp.o(.constdata__ZTVN8touchgfx8LCD16bppE)
</UL>
<P><STRONG><a name="[11c]"></a>touchgfx::Container::getSolidRect() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, container.o(i._ZNK8touchgfx9Container12getSolidRectEv))
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[11b]"></a>touchgfx::Container::draw(const touchgfx::Rect&) const</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, container.o(i._ZNK8touchgfx9Container4drawERKNS_4RectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = touchgfx::Container::draw(const touchgfx::Rect&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::draw(touchgfx::Rect&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata__ZTVN8touchgfx9ContainerE)
</UL>
<P><STRONG><a name="[226]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b5]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[1bf]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask
</UL>

<P><STRONG><a name="[1f6]"></a>__ARM_common_memcpy4_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd16bpp.o(i.__ARM_common_memcpy4_8))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::draw(touchgfx::Rect&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::draw(const touchgfx::Rect&) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Container::setupDrawChain(const touchgfx::Rect&, touchgfx::Drawable**)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Box::draw(const touchgfx::Rect&) const
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::invalidateArea(touchgfx::Rect)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Rect::operator &(const touchgfx::Rect&) const
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::fillRect(const touchgfx::Rect&, touchgfx::colortype, unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopy(const unsigned short*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char, bool)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyAlphaPerPixel(const unsigned short*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888Solid(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_ARGB8888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB888(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyL8_RGB565(const unsigned char*, const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyARGB8888(const unsigned*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::blitCopyRGB888(const unsigned char*, const touchgfx::Rect&, const touchgfx::Rect&, unsigned char)
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::cacheDrawOperations(bool)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::Application()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::STM32F4DMA()
</UL>

<P><STRONG><a name="[1c5]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_ARGB8888()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB888()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperL8_RGB565()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperARGB8888()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperRGB565()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::enableTextureMapperA4()
</UL>

<P><STRONG><a name="[104]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 6]<UL><LI> texts.o(.constdata__ZTVN8touchgfx4FontE)
<LI> screenviewbase.o(.constdata__ZTVN8touchgfx6WidgetE)
<LI> hal.o(.constdata__ZTVN8touchgfx3HALE)
<LI> abstractpartition.o(.constdata__ZTVN8touchgfx17AbstractPartitionE)
<LI> constfont.o(.constdata__ZTVN8touchgfx9ConstFontE)
<LI> drawable.o(.constdata__ZTVN8touchgfx8DrawableE)
</UL>
<P><STRONG><a name="[2b6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2b7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2b8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13f]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Wait_Ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Read_Byte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_NAck
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT_IIC_Ack
</UL>

<P><STRONG><a name="[92]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[13b]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; GT1151_Init &rArr; CT_IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM14_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT1151_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[139]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1be]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[22b]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>osSemaphoreCreate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::initialize()
</UL>

<P><STRONG><a name="[1ee]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::signalVSync()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphoreFromISR()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::giveFrameBufferSemaphore()
</UL>

<P><STRONG><a name="[1f0]"></a>osSemaphoreWait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::tryTakeFrameBufferSemaphore()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::takeFrameBufferSemaphore()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::OSWrappers::waitForVSync()
</UL>

<P><STRONG><a name="[1b1]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[24f]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[263]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[24a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b7]"></a>touchgfx_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, touchgfxconfiguration.o(i.touchgfx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = touchgfx_init &rArr; TouchGFXHAL::initialize() &rArr; TouchGFXGeneratedHAL::initialize() &rArr; touchgfx::HAL::initialize() &rArr; touchgfx::OSWrappers::initialize() &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstanceSize()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapDatabase::getInstance()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXHAL::initialize()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Texts::setLanguage(unsigned short)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Bitmap::registerBitmapDatabase(const touchgfx::Bitmap::BitmapData*, unsigned short, unsigned short*, unsigned, unsigned)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::FontManager::setFontProvider(touchgfx::FontProvider*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendHeap::FrontendHeap()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Init
</UL>

<P><STRONG><a name="[1b9]"></a>touchgfx_taskEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, touchgfxconfiguration.o(i.touchgfx_taskEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touchgfx_taskEntry &rArr; touchgfx::HAL::taskEntry() &rArr; touchgfx::OSWrappers::waitForVSync() &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::taskEntry()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TouchGFX_Process
</UL>

<P><STRONG><a name="[239]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[25b]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[23e]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[249]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[23b]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[23a]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[23d]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[23f]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[245]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[25d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[257]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[22c]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[261]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[259]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[25a]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[22d]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[250]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[131]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[25c]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[22f]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[22e]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[247]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[230]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>

<P><STRONG><a name="[232]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[233]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[234]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>

<P><STRONG><a name="[262]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[237]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[236]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[260]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c0]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[243]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[264]"></a>xTaskPriorityInherit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[24d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[253]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1e9]"></a>T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*)</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, frontendapplicationbase.o(t._ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = T2* touchgfx::makeTransition&lang;screenView, screenPresenter, touchgfx::NoTransition, Model&rang;(touchgfx::Screen**, touchgfx::Presenter**, touchgfx::MVPHeap&, touchgfx::Transition**, T4*) &rArr; screenView::screenView() &rArr; screenViewBase::screenViewBase() &rArr; touchgfx::Screen::Screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenView::screenView()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screenPresenter::screenPresenter(screenView&)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Screen::bindTransition(touchgfx::Transition&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::clearAllTimerWidgets()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::Application::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
</UL>

<P><STRONG><a name="[114]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::execute()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL>
<P><STRONG><a name="[121]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[122]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenView, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[123]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[124]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;screenPresenter, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[125]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element_size()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[126]"></a>touchgfx::Partition&lang;touchgfx::meta::TypeList&lang;touchgfx::NoTransition, touchgfx::meta::TypeList&lang;touchgfx::meta::Nil, touchgfx::meta::Nil&rang;&rang;, (unsigned short)1&rang;::element(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, touchgfxconfiguration.o(t._ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt))
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.constdata__ZTVN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEE)
</UL>
<P><STRONG><a name="[115]"></a>touchgfx::Callback&lang;FrontendApplicationBase, void, void, void&rang;::isValid() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frontendapplicationbase.o(t._ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv))
<BR>[Address Reference Count : 1]<UL><LI> frontendapplicationbase.o(.constdata__ZTVN8touchgfx8CallbackI23FrontendApplicationBasevvvEE)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[167]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, fmc.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[162]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[160]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[17f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[173]"></a>LTDC_SetConfig</STRONG> (Thumb, 354 bytes, Stack size 20 bytes, stm32f4xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[70]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[71]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1a1]"></a>UART_EndRxTransfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>UART_Receive_IT</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1aa]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[240]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[242]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[246]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[24b]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[24c]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[238]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[23c]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[244]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[9a]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[248]"></a>prvInitialiseNewTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[265]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[231]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[235]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[251]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[252]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[98]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[127]"></a>__sti___21_typedtextdatabase_cpp_05ec7672</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, typedtextdatabase.o(i.__sti___21_typedtextdatabase_cpp_05ec7672))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __sti___21_typedtextdatabase_cpp_05ec7672 &rArr; getFont_verdana_40_4bpp() &rArr; touchgfx::GeneratedFont::GeneratedFont(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, const unsigned char*const *, const touchgfx::KerningNode*, unsigned short, unsigned short, const unsigned short*, const touchgfx::FontContextualFormsTable*) &rArr; touchgfx::ConstFont::ConstFont__sub_object(const touchgfx::GlyphNode*, unsigned short, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_40_4bpp()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_20_4bpp()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFont_verdana_10_4bpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> typedtextdatabase.o(.init_array)
</UL>
<P><STRONG><a name="[128]"></a>__sti___25_TouchGFXConfiguration_cpp_f5abfd34</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, touchgfxconfiguration.o(i.__sti___25_TouchGFXConfiguration_cpp_f5abfd34))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __sti___25_TouchGFXConfiguration_cpp_f5abfd34 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::LCD16bpp::LCD16bpp()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32F4DMA::STM32F4DMA()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchgfx::HAL::HAL__sub_object(touchgfx::DMA_Interface&, touchgfx::LCD&, touchgfx::TouchController&, unsigned short, unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touchgfxconfiguration.o(.init_array)
</UL>
<P><STRONG><a name="[1e6]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::enableInterrupts()
</UL>

<P><STRONG><a name="[1e7]"></a>__NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._Z17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::disableInterrupts()
</UL>

<P><STRONG><a name="[1e8]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, touchgfxgeneratedhal.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGFXGeneratedHAL::configureInterrupts()
</UL>

<P><STRONG><a name="[73]"></a>DMA2D_XferCpltCallback(__DMA2D_HandleTypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32dma.o(i._Z22DMA2D_XferCpltCallbackP21__DMA2D_HandleTypeDef))
<BR>[Address Reference Count : 1]<UL><LI> stm32dma.o(i._ZN10STM32F4DMA10initializeEv)
</UL>
<P><STRONG><a name="[129]"></a>__sti___15_Application_cpp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, application.o(i.__sti___15_Application_cpp))
<BR>[Address Reference Count : 1]<UL><LI> application.o(.init_array)
</UL>
<P><STRONG><a name="[12a]"></a>__sti___7_LCD_cpp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.__sti___7_LCD_cpp))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.init_array)
</UL>
<P><STRONG><a name="[227]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
