/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/main_screen/mainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

mainViewBase::mainViewBase() :
    buttonCallback(this, &mainViewBase::buttonCallbackHandler),
    slideMenuStateChangedCallback(this, &mainViewBase::slideMenuStateChangedCallbackHandler),
    bottombarGetTransitionInfoCallback(this, &mainViewBase::bottombarGetTransitionInfoCallbackHandler),
    bottombarScrollWheelPressedCallback(this, &mainViewBase::bottombarScrollWheelPressedCallbackHandler),
    bottombarScrollWheelAnimationEndedCallback(this, &mainViewBase::bottombarScrollWheelAnimationEndedCallbackHandler),
    topbarChromARTStateChangedTriggerCallback(this, &mainViewBase::topbarChromARTStateChangedTriggerCallbackHandler),
    bottombarAnimaitonSpeedPressedCallback(this, &mainViewBase::bottombarAnimaitonSpeedPressedCallbackHandler)
{

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    backgroundBox.setPosition(0, 0, 800, 480);
    backgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    background.setXY(0, 50);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_DAY_FULL_ID));

    transitionMenu.setup(touchgfx::SlideMenu::NORTH,
        touchgfx::Bitmap(BITMAP_EMPTYBOTTOMBARBG_ID),
        touchgfx::Bitmap(BITMAP_SLIDEMENUBUTTON_ID),
        touchgfx::Bitmap(BITMAP_SLIDEMENUBUTTON_ID),
        0, 0, 326, 0);
    transitionMenu.setState(touchgfx::SlideMenu::EXPANDED);
    transitionMenu.setVisiblePixelsWhenCollapsed(51);
    transitionMenu.setHiddenPixelsWhenExpanded(0);
    transitionMenu.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    transitionMenu.setAnimationDuration(18);
    transitionMenu.setExpandedStateTimeout(180);
    transitionMenu.setXY(0, 330);
    transitionMenu.setStateChangedCallback(slideMenuStateChangedCallback);

    bottombar.setXY(0, 0);
    bottombar.setGetTransitionInfoCallback(bottombarGetTransitionInfoCallback);
    bottombar.setScrollWheelPressedCallback(bottombarScrollWheelPressedCallback);
    bottombar.setScrollWheelAnimationEndedCallback(bottombarScrollWheelAnimationEndedCallback);
    bottombar.setAnimaitonSpeedPressedCallback(bottombarAnimaitonSpeedPressedCallback);
    transitionMenu.add(bottombar);

    topbar.setXY(0, 0);
    topbar.setChromARTStateChangedTriggerCallback(topbarChromARTStateChangedTriggerCallback);

    selectedTransitionText.setPosition(200, 267, 400, 48);
    selectedTransitionText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    selectedTransitionText.setLinespacing(0);
    selectedTransitionText.setTypedText(touchgfx::TypedText(T_LARGECOVERTRANSITION));

    startTransitionButton.setXY(345, 155);
    startTransitionButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICON_PLAY_DARK_ID), touchgfx::Bitmap(BITMAP_ICON_PLAY_DARK_ID));
    startTransitionButton.setAction(buttonCallback);

    add(__background);
    add(backgroundBox);
    add(background);
    add(transitionMenu);
    add(topbar);
    add(selectedTransitionText);
    add(startTransitionButton);
}

void mainViewBase::setupScreen()
{
    bottombar.initialize();
    topbar.initialize();
}

void mainViewBase::bottombarGetTransitionInfoCallbackHandler(TransitionInfo* value)
{
    //GetTransitionInfoInteraction
    //When bottombar getTransitionInfo call getTransitionInfo on main
    //Call getTransitionInfo
    getTransitionInfo(value);
}

void mainViewBase::bottombarScrollWheelPressedCallbackHandler()
{
    //ScrollWheelPressedInteraction
    //When bottombar scrollWheelPressed call scrollWheelPressed on main
    //Call scrollWheelPressed
    scrollWheelPressed();
}

void mainViewBase::bottombarScrollWheelAnimationEndedCallbackHandler()
{
    //ScrollWheelAnimationEndedInteraction
    //When bottombar scrollWheelAnimationEnded call scrollWheelAnimationEnded on main
    //Call scrollWheelAnimationEnded
    scrollWheelAnimationEnded();
}

void mainViewBase::topbarChromARTStateChangedTriggerCallbackHandler(bool value)
{
    //TopbarChromARTPressed
    //When topbar chromARTStateChangedTrigger call ChromARTPressed on main
    //Call ChromARTPressed
    ChromARTPressed(value);
}

void mainViewBase::bottombarAnimaitonSpeedPressedCallbackHandler(bool value)
{
    //AnimationSpeeedButtonInteraction
    //When bottombar animaitonSpeedPressed call animationSpeedButtonPressed on main
    //Call animationSpeedButtonPressed
    animationSpeedButtonPressed(value);
}

void mainViewBase::startTransitionPressed()
{

}

void mainViewBase::getTransitionInfo(TransitionInfo* value)
{

}

void mainViewBase::scrollWheelPressed()
{

}

void mainViewBase::scrollWheelAnimationEnded()
{

}

void mainViewBase::sliderMenuStateChanged(SlideMenu::State value)
{

}

void mainViewBase::ChromARTPressed(bool value)
{

}

void mainViewBase::animationSpeedButtonPressed(bool value)
{

}

void mainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &startTransitionButton)
    {
        //startTransitionPressedInteraction
        //When startTransitionButton clicked call startTransitionPressed on main
        //Call startTransitionPressed
        startTransitionPressed();
    }
}

void mainViewBase::slideMenuStateChangedCallbackHandler(const touchgfx::SlideMenu& src)
{
    if (&src == &transitionMenu)
    {
        //SliderMenueStateChangedInteraction1
        //When transitionMenu state changed call animateArrow on bottombar
        //Call animateArrow
        bottombar.animateArrow(transitionMenu.getState());

        //SliderMenueStateChangedInteraction2
        //When transitionMenu state changed call sliderMenuStateChanged on main
        //Call sliderMenuStateChanged
        sliderMenuStateChanged(transitionMenu.getState());
    }
}
