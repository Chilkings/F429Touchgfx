/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TOPBARCONTAINERBASE_HPP
#define TOPBARCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>

class topbarContainerBase : public touchgfx::Container
{
public:
    topbarContainerBase();
    virtual ~topbarContainerBase() {}
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setChromARTStateChangedTriggerCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->chromARTStateChangedTriggerCallback = &callback;
    }

    /*
     * Custom Actions
     */
    virtual void chromARTStateChangedAction(bool value);

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitChromARTStateChangedTriggerCallback(bool value)
    {
        if (chromARTStateChangedTriggerCallback && chromARTStateChangedTriggerCallback->isValid())
        {
            this->chromARTStateChangedTriggerCallback->execute(value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Image bar;
    touchgfx::TextArea mcuTitle;
    touchgfx::TextAreaWithOneWildcard mcuValue;
    touchgfx::TextArea fpsTite;
    touchgfx::TextAreaWithOneWildcard fpsValue;
    touchgfx::Button infoButton;
    touchgfx::ToggleButton chromArtButton;
    touchgfx::FadeAnimator< touchgfx::Image > chromArtGradient;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MCUVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar mcuValueBuffer[MCUVALUE_SIZE];
    static const uint16_t FPSVALUE_SIZE = 3;
    touchgfx::Unicode::UnicodeChar fpsValueBuffer[FPSVALUE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<topbarContainerBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<bool>* chromARTStateChangedTriggerCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TOPBARCONTAINERBASE_HPP
