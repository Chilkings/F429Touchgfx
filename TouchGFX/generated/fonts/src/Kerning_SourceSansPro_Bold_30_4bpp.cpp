#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_SourceSansPro_Bold_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0046, -3 },  // (First char = [0x0046, F], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0050, -4 },  // (First char = [0x0050, P], Second char = [0x002C, comma], Kerning dist = -4)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0066, -2 },  // (First char = [0x0066, f], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0072, -3 },  // (First char = [0x0072, r], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x003F, question], Kerning dist = 1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x003F, question], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x003F, question], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0053, S], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0053, S], Kerning dist = -1)
    { 0x002C, -3 },  // (First char = [0x002C, comma], Second char = [0x0054, T], Kerning dist = -3)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0047, -1 },  // (First char = [0x0047, G], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0062, -2 },  // (First char = [0x0062, b], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x0054, T], Kerning dist = 1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0054, T], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0054, T], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0054, T], Kerning dist = -1)
    { 0x006F, -2 },  // (First char = [0x006F, o], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0070, -2 },  // (First char = [0x0070, p], Second char = [0x0054, T], Kerning dist = -2)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0075, -1 },  // (First char = [0x0075, u], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0054, T], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0055, U], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0047, -1 },  // (First char = [0x0047, G], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0066,  2 },  // (First char = [0x0066, f], Second char = [0x0056, V], Kerning dist = 2)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0075, -1 },  // (First char = [0x0075, u], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0058, X], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x0058, X], Kerning dist = 1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0064, d], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0066, f], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0067, g], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0067, -1 },  // (First char = [0x0067, g], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0073, s], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0074, t], Kerning dist = -2)
    { 0x0045, -1 },  // (First char = [0x0045, E], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0053, -1 },  // (First char = [0x0053, S], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0074, t], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0074, -1 },  // (First char = [0x0074, t], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0078, -1 },  // (First char = [0x0078, x], Second char = [0x0074, t], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0075, u], Kerning dist = -1)
    { 0x002C, -2 },  // (First char = [0x002C, comma], Second char = [0x0076, v], Kerning dist = -2)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0076, v], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0045, -1 },  // (First char = [0x0045, E], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0078, x], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0078, x], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0078, x], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0078, x], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, comma], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0079, y], Kerning dist = -1)
};
